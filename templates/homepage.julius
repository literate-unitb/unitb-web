var js_notice = document.getElementById(#{toJSON jsReqWarning});
document.getElementById("notices").removeChild(js_notice);

$(function() {
  $('.del-decl').click(function () {
    $(this).parent().parent().parent().slideUp(function () {
      // slide up the declaration container

      if ($(this).parent().children('.decl').length > 1) {
        // there's more than one declaration container, so
        // we can just delete this one.

        decl = $(this).prev().find('.form-control');
        // if there's a declaration before (above) this one
        if (decl.length > 0) {
          $(decl).focus(); // focus it
        }
        else {
          // otherwise, focus the next one
          $(this).next().find('.form-control').focus();
        }

        $(this).remove();
      }
      else {
        // there's only one declaration container left;
        // just clear it and focus the goal textarea
        $("##{rawJS goalTextareaId}").focus();
        $(this).find('.form-control')
          .val('')
          .attr('disabled', true);
      }
    });
  });

  $('#add-decl').click(function () {
    var btn = $(this);
    var decls = btn.parent().children('.decl');

    if (decls.length == 1 && !$(decls[0]).is(':visible')) {
      var input = $(decls[0]).find('.form-control');
      input.attr('disabled', false);               // enable the declaration input

      $(decls[0]).fadeIn('slow', function() {      // fade in the declaration container
        btn.attr('disabled', false);               // re-enable the '+' button after fading in
        input.focus();
      });
    }
    else {
      btn.attr('disabled', true);             // disable the '+' button while adding the new field
      var num     = parseInt(
                      $('.decl').last()
                        .attr('id')
                        .match(/\d+/)[0],
                      10),                    // numeric id of the last declaration
          newNum  = new Number(num + 1),      // numeric id of the new declaration input field
          newElem = $('#div-decl' + num)      // get the declaration container
            .clone(true, true)                // deep clone the last declaration
            .attr('id', 'div-decl' + newNum)  // assign new id
            .fadeIn('slow', function() {      // fade it in
              btn.attr('disabled', false);    // re-enable the '+' button after fading in
            });                  

      newElem.find('.form-control')           // get the input field of the new declaration
        .attr('id', 'decl' + newNum)          // assign new id to the input
        .attr('name', 'decl' + newNum)        // assign new name
        .val('');                             // clear the input text

      // insert the new element after the last declaration input field
      $('#div-decl' + num).after(newElem);
      $('#decl' + newNum).focus();
    }
  });

  $("##{rawJS goalFormId}").submit(function(event) {
    event.preventDefault();

    var goal = $("##{rawJS goalTextareaId}").val();
    // (Browsers that enforce the "required" attribute on the textarea won't see this alert)
    if (!goal) {
      alert("Please fill out the goal form first.");
      return;
    }

    // create an array of strings of theory values
    var theories = get_values($('#theories').serializeArray());

    // create an array of strings of declarations
    var decls = flatten_obj($('.decl input').serializeArray());

    // Make an AJAX request to the server to submit a goal
    $.ajax({
      url: '@{GoalR}',
      type: 'POST',
      contentType: "application/json",
      data: JSON.stringify({
        theories: theories,
        declarations: decls,
        goal: goal,
      }),
      success: function (data) {
        var newNode = $("<li></li>");
        newNode.text(JSON.stringify(data));
        $("##{rawJS goalListId}").append(newNode);
      },
      error: function (data) {
        console.log("Error creating goal: " + data);
      },
    });

  });

  // given an array of objects of the following form
  // [{"name":"decl1","value":"hi"},{"name":"decl2","value":"there"}]
  // returns an array of the 'value' fields, like this
  // ["hi", "there"]
  function get_values(arr_of_objs) {
    var arr = [];
    $(arr_of_objs).each(function(i, field) {
      arr.push(field.value);
    });
    return arr;
  }

  // given an array of objects of the following form
  // [{"name":"decl1","value":"hi"},{"name":"decl2","value":"there"}]
  // returns an array of arrays, like this
  // [["decl1", "hi"], ["decl2", "there"]]
  function flatten_obj(arr_of_objs) {
    var arr = [];
    $(arr_of_objs).each(function(i, field) {
      sub_arr = [];
      sub_arr.push(field.name);
      sub_arr.push(field.value);
      arr.push(sub_arr);
    });
    return arr;
  }
});
